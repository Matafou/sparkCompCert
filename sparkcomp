

if [ $# -eq 1 -o $# -eq 2 ]; then
    INPUT_FILENAME="$1"
    if [[ ! -f $INPUT_FILENAME ]]; then
	echo "Error: File ($INPUT_FILENAME) does not exist !"
	exit
    else
	if [[ $INPUT_FILENAME != *".adb" ]]; then
	    echo "Warning: ($INPUT_FILENAME) should have .adb extension."
	    exit
	fi
    fi
    INPUT_DIRNAME=`dirname $INPUT_FILENAME`
    INPUT_BASENAME=`basename $INPUT_FILENAME .adb`
    if [ $# == 2 ] ; then
	OUTPUT_FILENAME="$2"
    else
	OUTPUT_FILENAME=$INPUT_DIRNAME/$INPUT_BASENAME.mlo
    fi
else
    echo "Usage: $0 spark_file_name.adb [compcert_input_file_name.mlo]"
    exit
fi

echo executing: $0 $INPUT_FILENAME $OUTPUT_FILENAME...

COQ_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.v
COQVO_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.vo
ML_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.ml
MLO_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.mlo
MLNATIVE_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.native
MLNATIVE_FILE_RELOCATED=$INPUT_BASENAME.native
CMINOR_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.cm
CMINOR_FILE_RELOCATED=$INPUT_BASENAME.cm
ASM_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.s

COQ_AST_TREE="Coq_AST_Tree"
COQ_AST_TREE_X="Coq_AST_Tree_X"
SYMBOL_TABLE="Symbol_Table"  

echo -n emptying target file...
> $OUTPUT_FILENAME  # empty the file
> $COQ_FILE  # empty the file
echo done

echo "building coq file ("$COQ_FILE")..."
echo "Require Import checks_comparison." >> $COQ_FILE
echo "" >> $COQ_FILE  # insert newline
# echo "Import Check_Flags_Comparison_With_Debug_Infor." >> $COQ_FILE

echo building coq file... invoking sireum bakar...
/home/courtieu/src/Sireum/sireum bakar program -p Coq $INPUT_FILENAME $COQ_FILE.template
sed 's/_xx//g;s/_XX//g;s/(\*checks\*)//g' $COQ_FILE.template >> $COQ_FILE
rm $COQ_FILE.template
echo building coq file... invoking sireum bakar...done

echo building coq file... adding extraction directive to coq file...
echo -e "\n\n(* EXTRACTION COMMAND *)"  >> $COQ_FILE
echo "(* This must stick to compcert extraction syle, or input_value will segfault... *)"  >> $COQ_FILE
echo "Require Import ExtrOcamlBasic."  >> $COQ_FILE
echo "Require Import ExtrOcamlString."  >> $COQ_FILE
echo "Extraction \"$ML_FILE\" Symbol_Table Coq_AST_Tree." >> $COQ_FILE
echo building coq file... adding extraction directive to coq file...done
echo "building coq file ("$COQ_FILE")... done"

echo "compiling coq file (generating ml by extraction)"
make $COQVO_FILE
echo "compiling coq file (generating ml by extraction)... done"
echo "patching ml file (marshaling)..."
echo ";;" >> $ML_FILE
echo "print_string \"generating ocaml values...\n\";" >> $ML_FILE
echo "let oc = open_out \"$MLO_FILE\" in" >> $ML_FILE
echo "let _ = output_value oc (symbol_Table, coq_AST_Tree) in" >> $ML_FILE
echo "close_out oc" >> $ML_FILE
echo "patching ml file (marshaling)... done"


echo "compiling ml file..."
echo ocamlbuild -I spark $MLNATIVE_FILE
ocamlbuild -I spark $MLNATIVE_FILE
mv $MLNATIVE_FILE_RELOCATED $MLNATIVE_FILE
echo "compiling ml file... done"
echo "executing compiled ml file (for marshalling)..."
./$MLNATIVE_FILE
echo "executing compiled ml file (for marshalling)... done"

echo "compiling the file with compcert (via input_value + spark2Cminor)"
/home/courtieu/tmp/compcert/ccomp -dcminor -S $MLO_FILE -o $ASM_FILE
mv $CMINOR_FILE_RELOCATED $CMINOR_FILE
echo "compiling the file with compcert (via input_value + spark2Cminor)... done"

echo Cminor intermediate file $CMINOR_FILE:
echo "****************************************************"
cat $CMINOR_FILE
echo "*****************************************************"



# This is the part on runtime checks
# sed 's/xx/x/g;s/XX/X/g;s/(\*\*//g;s/\*\*)//g' $1 >> $2

# echo "Definition Ast_Tree_With_Expected_Checks := compile2_flagged_declaration_f $SYMBOL_TABLE $COQ_AST_TREE." >> $2
# echo "Definition Return_Msgs := compare_with_expected_results Ast_Tree_With_Expected_Checks $COQ_AST_TREE_X." >> $2
# echo "Definition Result := map_to_source_location $SYMBOL_TABLE Return_Msgs." >> $2

# echo "Eval compute in Result." >> $2

# eval "coqc $2" # run the test
