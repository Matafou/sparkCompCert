#-*- sh -*-
# This script performs a dirty compilation spark -> Compcert
# Actually it performs several dirty transformations:
#  foo.adb --[sireum bakar]--> foo.v
#  foo.v  --[patch(extraction) + coqc]--> foo.ml
#  foo.ml --[patch(marshal) + ocamlc + execution]--> foo.mlo (marshalled ml values)
#  foo.mlo --[compcert(with spark2Cminor.v)]--> foo.s (+foo.cm).
# usage sparkcomp source.adb [target.s]

# Getting the directory containing the current script
resourcedir=${0%/*}
# contains the path for sireum, spark, compcert, and coqtags, filled
# by ./configure.sh
. $resourcedir/.config


if [ $# -eq 1 -o $# -eq 2 ]; then
    INPUT_FILENAME="$1"
    if [[ ! -f $INPUT_FILENAME ]]; then
	echo "Error: File ($INPUT_FILENAME) does not exist !"
	exit
    else
	if [[ $INPUT_FILENAME != *".adb" ]]; then
	    echo "Warning: ($INPUT_FILENAME) should have .adb extension."
	    exit
	fi
    fi
    INPUT_DIRNAME=`dirname $INPUT_FILENAME`
    INPUT_BASENAME=`basename $INPUT_FILENAME .adb`
    if [ $# == 2 ] ; then
	OUTPUT_FILENAME="$2"
    else
	OUTPUT_FILENAME=$INPUT_DIRNAME/$INPUT_BASENAME.mlo
    fi
else
    echo "Usage: $0 spark_file_name.adb [compcert_input_file_name.mlo]"
    exit
fi

echo executing: $0 $INPUT_FILENAME $OUTPUT_FILENAME...

COQ_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.v
COQVO_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.vo
ML_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.ml
MLO_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.mlo
MLNATIVE_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.native
MLNATIVE_FILE_RELOCATED=$INPUT_BASENAME.native
CMINOR_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.cm
CMINOR_FILE_RELOCATED=$INPUT_BASENAME.cm
ASM_FILE=$INPUT_DIRNAME/$INPUT_BASENAME.s

COQ_AST_TREE="Coq_AST_Tree"
COQ_AST_TREE_X="Coq_AST_Tree_X"
SYMBOL_TABLE="Symbol_Table"  

echo -n emptying target file...
> $OUTPUT_FILENAME  # empty the file
echo done

echo "building coq file ("$COQ_FILE")..."
echo "Require Import checks_comparison." >> $COQ_FILE
echo "" >> $COQ_FILE  # insert newline
# echo "Import Check_Flags_Comparison_With_Debug_Infor." >> $COQ_FILE

echo building coq file... invoking sireum bakar...
$SIREUM/sireum bakar program -p Coq $INPUT_FILENAME $COQ_FILE.template
sed 's/_xx//g;s/_XX//g;s/(\*checks\*)//g' $COQ_FILE.template >> $COQ_FILE
rm $COQ_FILE.template
echo building coq file... invoking sireum bakar...done

echo building coq file... adding extraction directive to coq file...
echo -e "\n\n(* EXTRACTION COMMAND *)"  >> $COQ_FILE
echo "(* This must stick to compcert extraction syle, or input_value will segfault... *)"  >> $COQ_FILE
echo "Require Import ExtrOcamlBasic."  >> $COQ_FILE
echo "Require Import ExtrOcamlString."  >> $COQ_FILE
echo "Extraction \"$ML_FILE\" Symbol_Table Coq_AST_Tree." >> $COQ_FILE
echo building coq file... adding extraction directive to coq file...done
echo "building coq file ("$COQ_FILE")... done"

$resourcedir/coqSparkComp $COQ_FILE $2


