(**************************************************************************
* A user-customizable auto-naming scheme for hypothesis in Coq            *
* Author: Pierre Courtieu                                                 *
* Distributed under the terms of the LGPL-v3 license                      *
***************************************************************************)

(** This file is a set of tactical (mainly "!! t" where t is a tactic)
    and tactics (!intros, !destruct etc), that automatically rename
    new hypothesis after applying a tactic. The names chosen for
    hypothesis is programmable using Ltac. See examples in comment
    below.

    Comments welcome. *)

(* Comment this and the Z-dependent lines below if you don't want
   ZArith to be loaded *)
Require Import ZArith FunInd.
(* A tactical [T ;; T'] to apply some tactic T' on each new hypothesis
   generated by tactic T. A hypothesis is new if its name was not
   present before the tactic was applied. *)

(* Credit for the harvesting of hypothesis: Jonathan Leivant *)
Ltac harvest_hyps harvester := constr:(ltac:(harvester; constructor) : True).

Ltac revert_clearbody_all := 
  repeat lazymatch goal with H:_ |- _ => try clearbody H; revert H end.

Ltac all_hyps := harvest_hyps revert_clearbody_all.

Ltac next_hyp hs step last := 
  lazymatch hs with 
  | (?hs' ?H) => step H hs'
  | _ => last
  end.

Ltac map_hyps tac hs :=
  idtac;
  let rec step H hs := next_hyp hs step idtac; tac H in
  next_hyp hs step idtac.


Ltac tac_if_not_old tac old_hyps H :=
  match old_hyps with
  | context [H] => idtac (* old_hyps contains all old hyps in a product *)
  | _ => tac H + idtac (* never fail, this could be configurable *)
  end.

(* Applies tac and then aftertac to each new hypothesis *)
Ltac tac_new_hyps tac aftertac :=
  let old_hyps := all_hyps in
  let substnew H := tac_if_not_old aftertac old_hyps H in
  tac
  ; let new_hyps := all_hyps in
    map_hyps substnew new_hyps.

(* An example: apply subst to new (and only new) hypothesis: *)
(*
Ltac substHyp H :=
  match type of H with
  | ?x = ?y => subst x + subst y
  end.

Ltac subst_new_hyps tac :=
  tac_new_hyps tac substHyp.

Tactic Notation "=" tactic3(Tac) := (subst_new_hyps Tac).

Lemma foo: forall x y a t u v : nat,
    x = y -> a = t -> u = v -> False.
Proof.
  intros.
  =destruct x eqn:heq.
*)
